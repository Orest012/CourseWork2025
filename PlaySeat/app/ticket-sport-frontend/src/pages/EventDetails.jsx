import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import '../styles/eventDatail.css';

export default function EventDetails() {
  const { id } = useParams();
  const [event, setEvent] = useState(null);
  const [tickets, setTickets] = useState([]);
  const [error, setError] = useState('');
  const [ticketMessage, setTicketMessage] = useState('');
  const [selectedSeat, setSelectedSeat] = useState(null);
  const userId = 100;

  useEffect(() => {
    const fetchEventData = async () => {
      const token = localStorage.getItem('token');
      try {
        const [eventRes, ticketsRes] = await Promise.all([
          axios.get(`https://localhost:7178/api/Event/GetEvent/${id}`, {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get(`https://localhost:7178/api/Tickets/event/${id}`, {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);

        setEvent(eventRes.data);
        setTickets(ticketsRes.data);
      } catch (err) {
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó');
        console.error(err);
      }
    };

    fetchEventData();
  }, [id]);

  const availableTickets = tickets.filter(ticket => !ticket.isSold);
  const hasAvailableTickets = availableTickets.length > 0;

  const handleBuyTicket = async () => {
    if (!selectedSeat) {
      setTicketMessage('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ.');
      return;
    }

    const token = localStorage.getItem('token');
    setTicketMessage('');

    try {
      await axios.post(
        `https://localhost:7178/api/Tickets/buy/${selectedSeat.ticketId}/user/${userId}`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setTicketMessage(`–ö–≤–∏—Ç–æ–∫ –Ω–∞ –º—ñ—Å—Ü–µ ‚Ññ${selectedSeat.seatNumber} —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–Ω–æ üéâ`);
    } catch (err) {
      setTicketMessage('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∫—É–ø—ñ–≤–ª—ñ –∫–≤–∏—Ç–∫–∞');
      console.error(err);
    }
  };

  if (error) return <div className="event-error">{error}</div>;
  if (!event) return <div className="event-loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;

  return (
    <div className="event-container">
      <div className="event-header">
        <h1>{event.title}</h1>
        <p className="event-description">{event.description}</p>

        {event.imageUrl && (
          <div className="event-image">
            <img src={event.imageUrl} alt="–ú—ñ—Å—Ü–µ –ø–æ–¥—ñ—ó" className="venue-image" />
          </div>
        )}
      </div>

      <div className="event-details">
        <div className="event-info">
          <p><strong>–î–∞—Ç–∞:</strong> {new Date(event.eventDate).toLocaleDateString()}</p>
          <p><strong>–í–∏–¥ —Å–ø–æ—Ä—Ç—É:</strong> {event.sportType || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
        </div>

        <div className="event-venue">
          <h3>–ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è</h3>
          <p><strong>{event.venueName}</strong></p>
          <p>{event.venueAddress}, {event.venueCity}</p>
          <p><strong>–í–º—ñ—Å—Ç–∏–º—ñ—Å—Ç—å:</strong> {event.venueCapacity}</p>
        </div>

        <div className="event-organizer">
          <h3>–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä</h3>
          <p><strong>{event.organizerName}</strong></p>
          <p>{event.organizerContact}</p>
        </div>

        <div className="ticket-info">
          <h3>–ö–≤–∏—Ç–∫–∏</h3>
          <p><strong>–£—Å—å–æ–≥–æ –∫–≤–∏—Ç–∫—ñ–≤:</strong> {event.totalTickets}</p>
          <p><strong>–ü—Ä–æ–¥–∞–Ω–æ –∫–≤–∏—Ç–∫—ñ–≤:</strong> {event.ticketsSold}</p>
          <p><strong>–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞:</strong> {event.averagePrice ? `${event.averagePrice} –≥—Ä–Ω` : '–ù/–î'}</p>
        </div>

        <div className="event-ticket">
          {hasAvailableTickets ? (
            <>
              <button onClick={handleBuyTicket} className="ticket-button">
                –ü—Ä–∏–¥–±–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫
              </button>
              {ticketMessage && <p className="ticket-message">{ticketMessage}</p>}
            </>
          ) : (
            <p className="ticket-message">–ù–∞ –∂–∞–ª—å, —É—Å—ñ –∫–≤–∏—Ç–∫–∏ —Ä–æ–∑–ø—Ä–æ–¥–∞–Ω–æ üòû</p>
          )}
        </div>
      </div>

      {/* –í–∏–±—ñ—Ä –º—ñ—Å—Ü—è –ª–∏—à–µ —è–∫—â–æ –∫–≤–∏—Ç–∫–∏ —î */}
      {hasAvailableTickets && (
        <div className="seat-selection">
          <h3>–í–∏–±—ñ—Ä –º—ñ—Å—Ü—å</h3>
          <p>–û–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–µ –º—ñ—Å—Ü–µ</p>
          <div className="seat-map">
            {availableTickets.map((ticket) => (
              <button
                key={ticket.ticketId}
                className={`seat-button ${selectedSeat?.ticketId === ticket.ticketId ? 'selected' : ''}`}
                onClick={() => setSelectedSeat(ticket)}
              >
                –ú—ñ—Å—Ü–µ ‚Ññ{ticket.seatNumber}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
