// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Organizer", b =>
                {
                    b.Property<long>("OrganizerId")
                        .HasColumnType("bigint")
                        .HasColumnName("organizer_id");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_info");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("organization_name");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<bool?>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.HasKey("OrganizerId")
                        .HasName("organizers_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("organizers", (string)null);
                });

            modelBuilder.Entity("api.Models.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("payment_method");

                    b.Property<long?>("TicketId")
                        .HasColumnType("bigint")
                        .HasColumnName("ticket_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("payments_pkey");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("api.Models.SportEvent", b =>
                {
                    b.Property<long>("SportEventsId")
                        .HasColumnType("bigint")
                        .HasColumnName("sport_events_id");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("event_date");

                    b.Property<long?>("OrganizerId")
                        .HasColumnType("bigint")
                        .HasColumnName("organizer_id");

                    b.Property<string>("SportType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sport_type");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long?>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("SportEventsId")
                        .HasName("sport_events_pkey");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("VenueId");

                    b.ToTable("sport_events", (string)null);
                });

            modelBuilder.Entity("api.Models.Ticket", b =>
                {
                    b.Property<long>("TicketId")
                        .HasColumnType("bigint")
                        .HasColumnName("ticket_id");

                    b.Property<long?>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<bool?>("IsSold")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sold");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("PurchasedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchased_at");

                    b.Property<string>("SeatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("seat_number");

                    b.Property<string>("Section")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("section");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("TicketId")
                        .HasName("tickets_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("api.Models.TopEventResult", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TicketsSold")
                        .HasColumnType("bigint");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("TopEventResults");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("Users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("api.Models.Venue", b =>
                {
                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("address");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("imageurl");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("VenueId")
                        .HasName("venues_pkey");

                    b.ToTable("venues", (string)null);
                });

            modelBuilder.Entity("api.Models.Organizer", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany("Organizers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("organizers_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Payment", b =>
                {
                    b.HasOne("api.Models.Ticket", "Ticket")
                        .WithMany("Payments")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("payments_ticket_id_fkey");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("payments_user_id_fkey");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.SportEvent", b =>
                {
                    b.HasOne("api.Models.Organizer", "Organizer")
                        .WithMany("SportEvents")
                        .HasForeignKey("OrganizerId")
                        .HasConstraintName("sport_events_organizer_id_fkey");

                    b.HasOne("api.Models.Venue", "Venue")
                        .WithMany("SportEvents")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("sport_events_venue_id_fkey");

                    b.Navigation("Organizer");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("api.Models.Ticket", b =>
                {
                    b.HasOne("api.Models.SportEvent", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .HasConstraintName("tickets_event_id_fkey");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("tickets_user_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Organizer", b =>
                {
                    b.Navigation("SportEvents");
                });

            modelBuilder.Entity("api.Models.SportEvent", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.Ticket", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("Organizers");

                    b.Navigation("Payments");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.Venue", b =>
                {
                    b.Navigation("SportEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
